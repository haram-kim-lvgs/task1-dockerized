#version has been deprecated 
#https://docs.docker.com/compose/compose-file/#compose-file
#version: '3.8'

services:
  mysql:
    image: mysql:5.7 
    platform: linux/amd64
    #using .env file for docker = https://docs.docker.com/compose/compose-file/#env_file 
    env_file: 
      - ./.env
    #using environment variables, which gets used by container = https://docs.docker.com/compose/compose-file/#environment
    environment:
      - MYSQL_ROOT_PASSWORD=$DB_PASSWORD
      - MYSQL_DATABASE=$DB_NAME
      # MYSQL_TCP_PORT env var needed to be able to expose port other than the default 3306 = https://stackoverflow.com/questions/50456780/run-mysql-on-port-3307-using-docker-compose
      - MYSQL_TCP_PORT=$DB_PORT
    #ports in short syntax ([HOST:]CONTAINER[/PROTOCOL]) = https://docs.docker.com/compose/compose-file/#ports
    ports:
      - $DB_PORT:$DB_PORT
    volumes:
      #volumes should be mapped to default directory of each database type, for mysql, it is /var/lib/mysql
      - db:/var/lib/mysql
      #mounting custom cnf to set character set for mysql to support international languages
        # https://stackoverflow.com/questions/46004648/how-to-setup-mysql-with-utf-8-using-docker-compose
        #below custom cnf is needed to load the international characters on mysql client
          #but appears that if the purpose just for inserting, skipping the custom cnf & just adding the command is sufficient?
            #--> adding the default character set setting for client in custom.cnf enabled reading international characters from mysql client
            #--> but it indeed does not matter for the handling?? 
          #https://qiita.com/Suzuki09/items/c05664c7c0c08a19cebe
        # [appears to be YES..?] = TESTING ABOVE HYPOTHESIS BY RUNNING WITHOUT BELOW LINE & CHECK THE DEFAULT LANG SET IN MYSQL
        #command in mysql to check character set and collation = 'USE db_name; SELECT @@character_set_database, @@collation_database;'
          #https://dev.mysql.com/doc/refman/8.0/en/charset-database.html
      - ./international-lang-custom.cnf:/etc/mysql/conf.d/custom.cnf
    command: 
      #international language support
        #https://stackoverflow.com/questions/766809/whats-the-difference-between-utf8-general-ci-and-utf8-unicode-ci
        #https://dev.mysql.com/doc/mysql-g11n-excerpt/8.0/en/charset-unicode-sets.html
        #https://blog.hubspot.com/website/what-is-utf-8
      #["mysqld", "--character-set-server=utf8_unicode_520_ci"]
        #--> was getting error : "mysqld: Character set 'utf8_unicode_520_ci' is not a compiled character set and is not specified in the '/usr/share/mysql-8.0/charsets/Index.xml' file"
      ["mysqld", "--character-set-server=utf8mb4", "--collation-server=utf8mb4_unicode_ci"]
  node:
    #node container will NOT run until mysql container has been started
      #it is possible to set more granular condition with long syntax = https://docs.docker.com/compose/compose-file/#long-syntax-1 
    depends_on:
      - mysql
    platform: linux/amd64
    build: ./
    env_file: 
      - ./.env
    ports:
      - $APP_PORT:$APP_PORT
    #stdin_open & tty together opens container in interactive mode = https://stackoverflow.com/questions/36249744/interactive-shell-using-docker-compose
      #stdin_open (i.e., docker run -i)= https://docs.docker.com/compose/compose-file/#stdin_open
    stdin_open: true
      #tty (i.e., docker run -t) = https://docs.docker.com/compose/compose-file/#tty
    tty: true

volumes:
  #doc about named volume & bind volume
    # https://docs.docker.com/get-started/06_bind_mounts/
  #using named volume instead of bind volume
    # might want to use bind volume instead, if developing inside container to take advantage of tools such as nodemon
  db:

#networks:
